/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RandoContract,
  RandoContractInterface,
} from "../../ZebraTest.sol/RandoContract";

const _abi = [
  {
    inputs: [],
    name: "doSomething",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "somethingHasBeenDone",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a08061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806382692679146037578063bc8e313214604a575b600080fd5b60486000805460ff19166001179055565b005b60005460569060ff1681565b604051901515815260200160405180910390f3fea2646970667358221220f5fdb9db3a8bd2605d34d9a82d3fd3575194ef39aa3b879490bb1acc14ef687c64736f6c634300080f0033";

type RandoContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandoContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RandoContract__factory extends ContractFactory {
  constructor(...args: RandoContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RandoContract> {
    return super.deploy(overrides || {}) as Promise<RandoContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RandoContract {
    return super.attach(address) as RandoContract;
  }
  override connect(signer: Signer): RandoContract__factory {
    return super.connect(signer) as RandoContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandoContractInterface {
    return new utils.Interface(_abi) as RandoContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RandoContract {
    return new Contract(address, _abi, signerOrProvider) as RandoContract;
  }
}
