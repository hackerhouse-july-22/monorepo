/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Owner, OwnerInterface } from "../../ZebraTest.sol/Owner";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061024f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063150b7a021461003b5780631626ba7e14610076575b600080fd5b61005961004936600461016a565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200160405180910390f35b6100596100843660046101d2565b7f1626ba7e356f5979dd355a3d2bfb43e80420a480c3b854edce286a82d749686992915050565b80356001600160a01b03811681146100c257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126100ee57600080fd5b813567ffffffffffffffff80821115610109576101096100c7565b604051601f8301601f19908116603f01168101908282118183101715610131576101316100c7565b8160405283815286602085880101111561014a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561018057600080fd5b610189856100ab565b9350610197602086016100ab565b925060408501359150606085013567ffffffffffffffff8111156101ba57600080fd5b6101c6878288016100dd565b91505092959194509250565b600080604083850312156101e557600080fd5b82359150602083013567ffffffffffffffff81111561020357600080fd5b61020f858286016100dd565b915050925092905056fea26469706673582212206a284dd8dc88ceee2e25d985db4284de440c4310ecf4ef9f4604510434fff60864736f6c634300080f0033";

type OwnerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OwnerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Owner__factory extends ContractFactory {
  constructor(...args: OwnerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Owner> {
    return super.deploy(overrides || {}) as Promise<Owner>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Owner {
    return super.attach(address) as Owner;
  }
  override connect(signer: Signer): Owner__factory {
    return super.connect(signer) as Owner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OwnerInterface {
    return new utils.Interface(_abi) as OwnerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Owner {
    return new Contract(address, _abi, signerOrProvider) as Owner;
  }
}
