/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MyToken, MyTokenInterface } from "../../ZebraTest.sol/MyToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "play",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600781526020016626bcaa37b5b2b760c91b815250604051806040016040528060038152602001624d544b60e81b81525081600090816200005f91906200018c565b5060016200006e82826200018c565b5050506200008b620000856200009160201b60201c565b62000095565b62000258565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200011257607f821691505b6020821081036200013357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200018757600081815260208120601f850160051c81016020861015620001625750805b601f850160051c820191505b8181101562000183578281556001016200016e565b5050505b505050565b81516001600160401b03811115620001a857620001a8620000e7565b620001c081620001b98454620000fd565b8462000139565b602080601f831160018114620001f85760008415620001df5750858301515b600019600386901b1c1916600185901b17855562000183565b600085815260208120601f198616915b82811015620002295788860151825594840194600190910190840162000208565b5085821015620002485787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6114f780620002686000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063a22cb46511610071578063a22cb46514610239578063b88d4fde1461024c578063c87b56dd1461025f578063e985e9c514610272578063f2fde38b146102ae57600080fd5b806370a08231146101f7578063715018a6146102185780638da5cb5b1461022057806395d89b411461023157600080fd5b806323b872dd116100e957806323b872dd1461019857806340d097c3146101ab57806342842e0e146101be5780636352211e146101d15780636898f82b146101e457600080fd5b806301ffc9a71461011b57806306fdde0314610143578063081812fc14610158578063095ea7b314610183575b600080fd5b61012e61012936600461100d565b6102c1565b60405190151581526020015b60405180910390f35b61014b610313565b60405161013a9190611082565b61016b610166366004611095565b6103a5565b6040516001600160a01b03909116815260200161013a565b6101966101913660046110ca565b6103cc565b005b6101966101a63660046110f4565b6104e6565b6101966101b9366004611130565b610517565b6101966101cc3660046110f4565b610548565b61016b6101df366004611095565b610563565b6101966101f2366004611095565b6105c3565b61020a610205366004611130565b6105f8565b60405190815260200161013a565b61019661067e565b6006546001600160a01b031661016b565b61014b610692565b61019661024736600461114b565b6106a1565b61019661025a36600461119d565b6106ac565b61014b61026d366004611095565b6106e4565b61012e610280366004611279565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101966102bc366004611130565b610758565b60006001600160e01b031982166380ac58cd60e01b14806102f257506001600160e01b03198216635b5e139f60e01b145b8061030d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610322906112ac565b80601f016020809104026020016040519081016040528092919081815260200182805461034e906112ac565b801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b5050505050905090565b60006103b0826107d1565b506000908152600460205260409020546001600160a01b031690565b60006103d782610563565b9050806001600160a01b0316836001600160a01b0316036104495760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061046557506104658133610280565b6104d75760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610440565b6104e18383610830565b505050565b6104f0338261089e565b61050c5760405162461bcd60e51b8152600401610440906112e6565b6104e183838361091d565b61051f610ab9565b600061052a60085490565b905061053a600880546001019055565b6105448282610b13565b5050565b6104e1838383604051806020016040528060008152506106ac565b6000818152600260205260408120546001600160a01b03168061030d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610440565b336105cd82610563565b6001600160a01b0316146105e057600080fd5b600780549060006105f08361134a565b919050555050565b60006001600160a01b0382166106625760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610440565b506001600160a01b031660009081526003602052604090205490565b610686610ab9565b6106906000610b2d565b565b606060018054610322906112ac565b610544338383610b7f565b6106b6338361089e565b6106d25760405162461bcd60e51b8152600401610440906112e6565b6106de84848484610c4d565b50505050565b60606106ef826107d1565b600061070660408051602081019091526000815290565b905060008151116107265760405180602001604052806000815250610751565b8061073084610c80565b604051602001610741929190611363565b6040516020818303038152906040525b9392505050565b610760610ab9565b6001600160a01b0381166107c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610440565b6107ce81610b2d565b50565b6000818152600260205260409020546001600160a01b03166107ce5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610440565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061086582610563565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806108aa83610563565b9050806001600160a01b0316846001600160a01b031614806108f157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806109155750836001600160a01b031661090a846103a5565b6001600160a01b0316145b949350505050565b826001600160a01b031661093082610563565b6001600160a01b0316146109945760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610440565b6001600160a01b0382166109f65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610440565b610a01600082610830565b6001600160a01b0383166000908152600360205260408120805460019290610a2a908490611392565b90915550506001600160a01b0382166000908152600360205260408120805460019290610a589084906113a9565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b031633146106905760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b610544828260405180602001604052806000815250610d81565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610be05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610440565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610c5884848461091d565b610c6484848484610db4565b6106de5760405162461bcd60e51b8152600401610440906113c1565b606081600003610ca75750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610cd15780610cbb8161134a565b9150610cca9050600a83611429565b9150610cab565b60008167ffffffffffffffff811115610cec57610cec611187565b6040519080825280601f01601f191660200182016040528015610d16576020820181803683370190505b5090505b841561091557610d2b600183611392565b9150610d38600a8661143d565b610d439060306113a9565b60f81b818381518110610d5857610d58611451565b60200101906001600160f81b031916908160001a905350610d7a600a86611429565b9450610d1a565b610d8b8383610eb5565b610d986000848484610db4565b6104e15760405162461bcd60e51b8152600401610440906113c1565b60006001600160a01b0384163b15610eaa57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610df8903390899088908890600401611467565b6020604051808303816000875af1925050508015610e33575060408051601f3d908101601f19168201909252610e30918101906114a4565b60015b610e90573d808015610e61576040519150601f19603f3d011682016040523d82523d6000602084013e610e66565b606091505b508051600003610e885760405162461bcd60e51b8152600401610440906113c1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610915565b506001949350505050565b6001600160a01b038216610f0b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610440565b6000818152600260205260409020546001600160a01b031615610f705760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610440565b6001600160a01b0382166000908152600360205260408120805460019290610f999084906113a9565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146107ce57600080fd5b60006020828403121561101f57600080fd5b813561075181610ff7565b60005b8381101561104557818101518382015260200161102d565b838111156106de5750506000910152565b6000815180845261106e81602086016020860161102a565b601f01601f19169290920160200192915050565b6020815260006107516020830184611056565b6000602082840312156110a757600080fd5b5035919050565b80356001600160a01b03811681146110c557600080fd5b919050565b600080604083850312156110dd57600080fd5b6110e6836110ae565b946020939093013593505050565b60008060006060848603121561110957600080fd5b611112846110ae565b9250611120602085016110ae565b9150604084013590509250925092565b60006020828403121561114257600080fd5b610751826110ae565b6000806040838503121561115e57600080fd5b611167836110ae565b91506020830135801515811461117c57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156111b357600080fd5b6111bc856110ae565b93506111ca602086016110ae565b925060408501359150606085013567ffffffffffffffff808211156111ee57600080fd5b818701915087601f83011261120257600080fd5b81358181111561121457611214611187565b604051601f8201601f19908116603f0116810190838211818310171561123c5761123c611187565b816040528281528a602084870101111561125557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561128c57600080fd5b611295836110ae565b91506112a3602084016110ae565b90509250929050565b600181811c908216806112c057607f821691505b6020821081036112e057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001820161135c5761135c611334565b5060010190565b6000835161137581846020880161102a565b83519083019061138981836020880161102a565b01949350505050565b6000828210156113a4576113a4611334565b500390565b600082198211156113bc576113bc611334565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261143857611438611413565b500490565b60008261144c5761144c611413565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061149a90830184611056565b9695505050505050565b6000602082840312156114b657600080fd5b815161075181610ff756fea2646970667358221220fc0339d64f9a3c112c6c05f993b502db03ce57fab85f9e8c7f3872104cb604f064736f6c634300080f0033";

type MyTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyToken__factory extends ContractFactory {
  constructor(...args: MyTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MyToken> {
    return super.deploy(overrides || {}) as Promise<MyToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MyToken {
    return super.attach(address) as MyToken;
  }
  override connect(signer: Signer): MyToken__factory {
    return super.connect(signer) as MyToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyTokenInterface {
    return new utils.Interface(_abi) as MyTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MyToken {
    return new Contract(address, _abi, signerOrProvider) as MyToken;
  }
}
