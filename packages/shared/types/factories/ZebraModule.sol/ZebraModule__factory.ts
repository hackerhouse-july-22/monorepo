/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ZebraModule,
  ZebraModuleInterface,
} from "../../ZebraModule.sol/ZebraModule";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerIsNotProtocol",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "NFT",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "contract IGnosisSafe",
        name: "safe",
        type: "address",
      },
    ],
    name: "giveAllowanceToZebra",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50336080526080516102c26100356000396000818160500152609401526102c26000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637163d98614610030575b600080fd5b61004361003e366004610184565b610045565b005b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461008e57604051632160203f60e11b815260040160405180910390fd5b604080517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b179052915163468721a760e01b8152909183169063468721a790610122908790600090869082906004016101e8565b6020604051808303816000875af1158015610141573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101659190610263565b5050505050565b6001600160a01b038116811461018157600080fd5b50565b60008060006060848603121561019957600080fd5b83356101a48161016c565b92506020840135915060408401356101bb8161016c565b809150509250925092565b600281106101e457634e487b7160e01b600052602160045260246000fd5b9052565b60018060a01b038516815260006020858184015260806040840152845180608085015260005b8181101561022a5786810183015185820160a00152820161020e565b8181111561023c57600060a083870101525b50601f01601f1916830160a001915061025a905060608301846101c6565b95945050505050565b60006020828403121561027557600080fd5b8151801515811461028557600080fd5b939250505056fea264697066735822122019c1331148af27094da492346ea40174469466829434a605302696996f0f963064736f6c634300080f0033";

type ZebraModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZebraModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZebraModule__factory extends ContractFactory {
  constructor(...args: ZebraModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ZebraModule> {
    return super.deploy(overrides || {}) as Promise<ZebraModule>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ZebraModule {
    return super.attach(address) as ZebraModule;
  }
  override connect(signer: Signer): ZebraModule__factory {
    return super.connect(signer) as ZebraModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZebraModuleInterface {
    return new utils.Interface(_abi) as ZebraModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZebraModule {
    return new Contract(address, _abi, signerOrProvider) as ZebraModule;
  }
}
