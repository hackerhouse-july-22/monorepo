/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type OfferStruct = {
  NFT: PromiseOrValue<string>;
  tokenId: PromiseOrValue<BigNumberish>;
  pricePerSecond: PromiseOrValue<BigNumberish>;
  maxRentalDuration: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
};

export type OfferStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  NFT: string;
  tokenId: BigNumber;
  pricePerSecond: BigNumber;
  maxRentalDuration: BigNumber;
  nonce: BigNumber;
};

export interface ZebraInterface extends utils.Interface {
  functions: {
    "FACTORY()": FunctionFragment;
    "GNOSIS_SAFE_SINGLETON()": FunctionFragment;
    "INSTALLER()": FunctionFragment;
    "WETH()": FunctionFragment;
    "ZEBRA_MODULE()": FunctionFragment;
    "checkAfterExecution(bytes32,bool)": FunctionFragment;
    "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": FunctionFragment;
    "claimAsset(address,uint256)": FunctionFragment;
    "claimDevFees()": FunctionFragment;
    "claimRents()": FunctionFragment;
    "claimableBy(address)": FunctionFragment;
    "createZebraSafe()": FunctionFragment;
    "devClaimable()": FunctionFragment;
    "devCut()": FunctionFragment;
    "getOfferDigest((address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "isZebraRegistered(address)": FunctionFragment;
    "loan(address,uint256)": FunctionFragment;
    "minRentalDuration()": FunctionFragment;
    "minRentalPricePerSecond()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rent(uint256,address,(address,uint256,uint256,uint256,uint256),bytes)": FunctionFragment;
    "revokeOffers()": FunctionFragment;
    "supplierNonce(address)": FunctionFragment;
    "supplierOf(address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FACTORY"
      | "GNOSIS_SAFE_SINGLETON"
      | "INSTALLER"
      | "WETH"
      | "ZEBRA_MODULE"
      | "checkAfterExecution"
      | "checkTransaction"
      | "claimAsset"
      | "claimDevFees"
      | "claimRents"
      | "claimableBy"
      | "createZebraSafe"
      | "devClaimable"
      | "devCut"
      | "getOfferDigest"
      | "isZebraRegistered"
      | "loan"
      | "minRentalDuration"
      | "minRentalPricePerSecond"
      | "owner"
      | "renounceOwnership"
      | "rent"
      | "revokeOffers"
      | "supplierNonce"
      | "supplierOf"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "FACTORY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GNOSIS_SAFE_SINGLETON",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "INSTALLER", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ZEBRA_MODULE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAfterExecution",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAsset",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDevFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableBy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createZebraSafe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devClaimable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "devCut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOfferDigest",
    values: [OfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isZebraRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "loan",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minRentalDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRentalPricePerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rent",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      OfferStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOffers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplierNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supplierOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "FACTORY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GNOSIS_SAFE_SINGLETON",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "INSTALLER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ZEBRA_MODULE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAfterExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimDevFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimRents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createZebraSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOfferDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isZebraRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minRentalDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRentalPricePerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplierNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supplierOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ZebraSafeDeploy(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZebraSafeDeploy"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ZebraSafeDeployEventObject {
  safeProxy: string;
}
export type ZebraSafeDeployEvent = TypedEvent<
  [string],
  ZebraSafeDeployEventObject
>;

export type ZebraSafeDeployEventFilter = TypedEventFilter<ZebraSafeDeployEvent>;

export interface Zebra extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZebraInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FACTORY(overrides?: CallOverrides): Promise<[string]>;

    GNOSIS_SAFE_SINGLETON(overrides?: CallOverrides): Promise<[string]>;

    INSTALLER(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    ZEBRA_MODULE(overrides?: CallOverrides): Promise<[string]>;

    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkTransaction(
      to: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      arg8: PromiseOrValue<string>,
      arg9: PromiseOrValue<BytesLike>,
      arg10: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    claimAsset(
      NFT: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimDevFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRents(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimableBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createZebraSafe(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devClaimable(overrides?: CallOverrides): Promise<[BigNumber]>;

    devCut(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOfferDigest(
      offer: OfferStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { digest: string }>;

    isZebraRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { renter: string; endDate: BigNumber }>;

    minRentalDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minRentalPricePerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rent(
      duration: PromiseOrValue<BigNumberish>,
      safe: PromiseOrValue<string>,
      offer: OfferStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeOffers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supplierNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supplierOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FACTORY(overrides?: CallOverrides): Promise<string>;

  GNOSIS_SAFE_SINGLETON(overrides?: CallOverrides): Promise<string>;

  INSTALLER(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  ZEBRA_MODULE(overrides?: CallOverrides): Promise<string>;

  checkAfterExecution(
    txHash: PromiseOrValue<BytesLike>,
    success: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkTransaction(
    to: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    arg6: PromiseOrValue<BigNumberish>,
    arg7: PromiseOrValue<string>,
    arg8: PromiseOrValue<string>,
    arg9: PromiseOrValue<BytesLike>,
    arg10: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  claimAsset(
    NFT: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimDevFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRents(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimableBy(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createZebraSafe(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devClaimable(overrides?: CallOverrides): Promise<BigNumber>;

  devCut(overrides?: CallOverrides): Promise<BigNumber>;

  getOfferDigest(
    offer: OfferStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  isZebraRegistered(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loan(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { renter: string; endDate: BigNumber }>;

  minRentalDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minRentalPricePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rent(
    duration: PromiseOrValue<BigNumberish>,
    safe: PromiseOrValue<string>,
    offer: OfferStruct,
    signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeOffers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supplierNonce(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supplierOf(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FACTORY(overrides?: CallOverrides): Promise<string>;

    GNOSIS_SAFE_SINGLETON(overrides?: CallOverrides): Promise<string>;

    INSTALLER(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    ZEBRA_MODULE(overrides?: CallOverrides): Promise<string>;

    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkTransaction(
      to: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      arg8: PromiseOrValue<string>,
      arg9: PromiseOrValue<BytesLike>,
      arg10: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAsset(
      NFT: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimDevFees(overrides?: CallOverrides): Promise<void>;

    claimRents(overrides?: CallOverrides): Promise<void>;

    claimableBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createZebraSafe(overrides?: CallOverrides): Promise<string>;

    devClaimable(overrides?: CallOverrides): Promise<BigNumber>;

    devCut(overrides?: CallOverrides): Promise<BigNumber>;

    getOfferDigest(
      offer: OfferStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    isZebraRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { renter: string; endDate: BigNumber }>;

    minRentalDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minRentalPricePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rent(
      duration: PromiseOrValue<BigNumberish>,
      safe: PromiseOrValue<string>,
      offer: OfferStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOffers(overrides?: CallOverrides): Promise<void>;

    supplierNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplierOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ZebraSafeDeploy(address)"(
      safeProxy?: PromiseOrValue<string> | null
    ): ZebraSafeDeployEventFilter;
    ZebraSafeDeploy(
      safeProxy?: PromiseOrValue<string> | null
    ): ZebraSafeDeployEventFilter;
  };

  estimateGas: {
    FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    GNOSIS_SAFE_SINGLETON(overrides?: CallOverrides): Promise<BigNumber>;

    INSTALLER(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    ZEBRA_MODULE(overrides?: CallOverrides): Promise<BigNumber>;

    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkTransaction(
      to: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      arg8: PromiseOrValue<string>,
      arg9: PromiseOrValue<BytesLike>,
      arg10: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAsset(
      NFT: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimDevFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRents(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimableBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createZebraSafe(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devClaimable(overrides?: CallOverrides): Promise<BigNumber>;

    devCut(overrides?: CallOverrides): Promise<BigNumber>;

    getOfferDigest(
      offer: OfferStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isZebraRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minRentalDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minRentalPricePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rent(
      duration: PromiseOrValue<BigNumberish>,
      safe: PromiseOrValue<string>,
      offer: OfferStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeOffers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supplierNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplierOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GNOSIS_SAFE_SINGLETON(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INSTALLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZEBRA_MODULE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkTransaction(
      to: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      arg8: PromiseOrValue<string>,
      arg9: PromiseOrValue<BytesLike>,
      arg10: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAsset(
      NFT: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimDevFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRents(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimableBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createZebraSafe(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devClaimable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devCut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOfferDigest(
      offer: OfferStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isZebraRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minRentalDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRentalPricePerSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rent(
      duration: PromiseOrValue<BigNumberish>,
      safe: PromiseOrValue<string>,
      offer: OfferStruct,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeOffers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supplierNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supplierOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
